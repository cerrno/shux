let scalar dt = 0.01;
let scalar g = -9.81;

/* 1D particle data structure with pos and vel */
struct particle {
   scalar x;
   scalar v;
}

kn euler_kernel(particle p) particle {
   struct particle {
      .v = p.v..1 + g * dt;
      .x = p.x..1 + p.v..1 * dt;
   }
}

gn euler(particle[] init) particle[] {
   var particle[] particles_buffer = particles_buffer @ p -> {
      /* couldn't we use the kernel here? */
      struct particle {
         .v = p.v..1 + g * dt;
	 .x = p.x..1 + p.v..1 * dt;
      }
   } init
}

kn main() int {
   var particle[1] particles_init = [struct particle { .v=1; .x=0; }]; /* do we have an easy way of doing this? */
   var particle[1] p_40
   var particle[1] p_40_select;

   for 1000 euler(p_init) @ state -> {
      print("this should display"); /* we don't have opengl bindings yet */
   }

   p_40 = do 40 euler(p_init); /* copies array */
   p_40_select = p_40 :: p -> {
      p.x[0] < 4 && p.x[1] < 4
   };

   print("this should display"); /* again, graphics */
}
   